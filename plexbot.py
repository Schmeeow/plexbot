""" SimPlexBot - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è PLEX (async)"""

import asyncio
import sys
import xml.etree.ElementTree
import urllib.request
import time
import random
import os
import itertools

from aiogram import F, Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message, FSInputFile


###  –ù–ê–°–¢–†–û–ô–ö–ò

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫. XML-—Ñ–∞–π–ª—ã –±–∏–±–ª–∏–æ—Ç–µ–∫ –æ–±—ã—á–Ω–æ –ª–µ–∂–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É
# –≤–∏–¥–∞ 'http://SERVER_IP:32400/library/sections/ID/all, ID –æ–±—ã—á–Ω–æ –∏–¥—É—Ç
# –ø–æ –ø–æ—Ä—è–¥–∫—É. –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–≤–∞ –≤–∏–¥–∞ –º–µ–¥–∏–∞ - Movies –∏ Series

PLEX_SERVER_CONFIG = { 'url':'http://192.168.1.111',
                       'port':'32400',
                       'libraries':[{'name':'–§–ò–õ–¨–ú–´','id':'1'},
                                    {'name':'–°E–†–ò–ê–õ–´','id':'2'},
                                    {'name':'–ú–£–õ–¨–¢–§–ò–õ–¨–ú–´','id':'3'},
                                    {'name':'–ú–£–õ–¨–¢–°–ï–†–ò–ê–õ–´','id':'4'},
                                    {'name':'–î–û–ö–§–ò–õ–¨–ú–´','id':'10'},
                                    {'name':'–î–û–ö–°–ï–†–ò–ê–õ–´','id':'8'}] }

FRESH_DAYS = 14  #—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏, —á—Ç–æ–±—ã –º–µ–¥–∏–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–æ —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–æ–≤—ã–π

BLANK_IMAGE = '/web/static/b38a559594ac52d049ba.png' # –ø—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ

TEMP_DIR = 'temp' # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫

CACHE_TIME = 3 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è XML, –≤ –º–∏–Ω—É—Ç–∞—Ö


### –§–£–ù–ö–¶–ò–ò


lib_items = {}
last_request_time = 0

async def parse_lib(url, name) -> dict:
    """ –ì—Ä—É–∑–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å, –∑–∞–º–µ–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""   
    try:
        with urllib.request.urlopen(url) as url_handle:
            parsed_handle = xml.etree.ElementTree.parse(url_handle)
    except Exception as error:
        print(f"ERROR: XML-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {url}")
        sys.exit(1)
    lib_root = parsed_handle.getroot()
    iterables = itertools.chain(lib_root.iter('Video'),lib_root.iter('Directory')) # —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
    items = []
    for child in iterables:
        item = {}
        if not 'title' in child.attrib:
            item['title'] = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        else:
            item['title'] = child.attrib['title']
        if not 'title' in child.attrib:
            item['title'] = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        else:
            item['title'] = child.attrib['title']
        if not 'summary' in child.attrib:
            item['summary'] = '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
        else:
            item['summary'] = child.attrib['summary']
        if 'childCount' in child.attrib:
            item['episodes'] = f"{child.attrib['childCount']} {numeral_text_ending('seasons', child.attrib['childCount'])}, " \
                               f"{child.attrib['leafCount']} {numeral_text_ending('series', child.attrib['leafCount'])}"
        if not 'year' in child.attrib:
            item['year'] = 'XXXX'
        else:
            item['year'] = child.attrib['year']
        if not 'thumb' in child.attrib:
            item['thumb'] = f"{PLEX_SERVER_CONFIG['url']}:{PLEX_SERVER_CONFIG['port']}{BLANK_IMAGE}"
        else:
            item['thumb'] = f"{PLEX_SERVER_CONFIG['url']}:{PLEX_SERVER_CONFIG['port']}{child.attrib['thumb']}"
        if not 'audienceRating' in child.attrib:
            item['rating'] = '---'
        else:
            item['rating'] = child.attrib['audienceRating']
        if not 'title' in child.attrib:
            item['date_added'] = '1262304000' # 1 —è–Ω–≤–∞—Ä—è 2010, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        else:
            item['date_added'] = child.attrib['addedAt']
        items.append(item)
    lib_items[name] = items
    return lib_items[name]


async def load_and_parse() -> dict:
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ """    
    global last_request_time    
    if round(time.time()) - last_request_time >= CACHE_TIME*60: # –∫—ç—à–∏—Ä—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π XML
        tasks=[]
        for library in PLEX_SERVER_CONFIG['libraries']:
            url = f"{PLEX_SERVER_CONFIG['url']}:{PLEX_SERVER_CONFIG['port']}" \
                  f"/library/sections/{library['id']}/all"
            task = parse_lib(url,library['name'])
            tasks.append(task)
        await asyncio.gather(*tasks)
        last_request_time = round(time.time())
        return lib_items


def numeral_text_ending(text_type, number) -> str:
    """ –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤ –∏–ª–∏ —Å–µ—Ä–∏–π """
    season_endings = ['—Å–µ–∑–æ–Ω–æ–≤','—Å–µ–∑–æ–Ω',
                      '—Å–µ–∑–æ–Ω–∞','—Å–µ–∑–æ–Ω–∞',
                      '—Å–µ–∑–æ–Ω–∞','—Å–µ–∑–æ–Ω–æ–≤',
                      '—Å–µ–∑–æ–Ω–æ–≤','—Å–µ–∑–æ–Ω–æ–≤',
                      '—Å–µ–∑–æ–Ω–æ–≤','—Å–µ–∑–æ–Ω–æ–≤']
    series_endings = ['—Å–µ—Ä–∏–π','—Å–µ—Ä–∏—è',
                      '—Å–µ—Ä–∏–∏','—Å–µ—Ä–∏–∏',
                      '—Å–µ—Ä–∏–∏','—Å–µ—Ä–∏–π',
                      '—Å–µ—Ä–∏–π','—Å–µ—Ä–∏–π',
                      '—Å–µ—Ä–∏–π','—Å–µ—Ä–∏–π']
    if text_type == 'seasons':
        if 5 <= int(number) <= 15:
            text_ending = '—Å–µ–∑–æ–Ω–æ–≤'
        else:
            last_digit = int(str(number)[-1])
            text_ending = season_endings[last_digit]
    if text_type == "series":
        if 5 <= int(number) <= 15:
            text_ending = '—Å–µ—Ä–∏–π'
        else:
            last_digit = int(str(number)[-1])
            text_ending = series_endings[last_digit]
    return text_ending


def get_list(freshness = 10_000) -> list:
    """ –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–≤–µ–∂–µ—Å—Ç—å—é.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ–∂–µ—Å—Ç—å —Ä–∞–≤–Ω–∞ 10 000 –¥–Ω—è–º, —Ç–æ –µ—Å—Ç—å –≤—ã–≤–æ–¥—è—Ç—Å—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
    –ü—É—Å—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è """
    results = {}
    freshness = freshness*24*60*60    
    for lib in lib_items:       
        items = []        
        for item in lib_items[lib]:
            if time.time() - freshness <= int(item['date_added']):
                if not 'episodes' in item.keys():
                    item_desc = f"{item['title']} ({item['year']}) ‚≠ê {item['rating']}"
                else:
                    item_desc = f"{item['title']} ({item['year']}) [{item['episodes']}] ‚≠ê {item['rating']}"
                items.append(item_desc)
        if items:
            results[lib] = items
    return results


def search_by_string(message) -> list:
    """ –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—Ä–∞–∑–µ. –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏
    –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –º–µ–Ω—è–µ–º '–µ' –Ω–∞ '—ë'. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    results = {}
    image = None
    caption = None
    search_string = message.casefold()
    search_string = search_string.replace('—ë', '–µ').replace('.', '').replace(':', '')
    search_string = search_string.replace(',', '').replace('(','').replace(')','').replace('-',' ')
    for lib in lib_items:
        items = []
        for item in lib_items[lib]:
            searchable_title = f"{item['title']} {item['year']}".casefold()
            searchable_title = searchable_title.replace('—ë', '–µ').replace('.', '')
            searchable_title = searchable_title.replace(':', '').replace(',', '').replace('-',' ')
            if search_string in searchable_title:
                if not 'episodes' in item.keys():
                    item_desc = f"{item['title']} ({item['year']})  ‚≠ê {item['rating']}::{item['summary']}" \
                                f"::{item['thumb']}"
                else:
                    item_desc = f"{item['title']} ({item['year']}) [{item['episodes']}] ‚≠ê {item['rating']}::" \
                                f"{item['summary']}::{item['thumb']}"
                items.append(item_desc)
        if items:
            results[lib] = items
    if results:
        if len(results) == 1 and len(list(results.values())[0]) == 1:
            item = str(list(results.values())[0][0])
            desc = item.split('::')
            caption = f"üçø {desc[0]}\n{desc[1]}"
            thumbnail = f"{desc[2]}"
            urllib.request.urlretrieve(thumbnail, f"{TEMP_DIR}/result.jpg")
            image = FSInputFile(f'{TEMP_DIR}/result.jpg')
            results = 'single_item'
    return results, image, caption


def get_random_item() -> (FSInputFile, str):
    """ –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ """    
    items = []
    for lib in lib_items:
        for item in lib_items[lib]:
            if not 'episodes' in item.keys():
                item_desc = f"{item['title']} ({item['year']})::{item['summary']}" \
                            f"::{item['thumb']}"
            else:
                item_desc = f"{item['title']} ({item['year']}) [{item['episodes']}]::" \
                            f"{item['summary']}::{item['thumb']}"
            items.append(item_desc)
    desc = random.choice(items).split('::')
    caption = f"üçø {desc[0]}\n{desc[1]}"
    thumbnail = f"{desc[2]}"
    urllib.request.urlretrieve(thumbnail, f"{TEMP_DIR}/result.jpg")
    image = FSInputFile(f'{TEMP_DIR}/result.jpg')
    return image, caption


def compose_message(results, rows) -> list:
    """ –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
    (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ = rows) –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è """
    message_parts = []
    for lib in results:
        lines = []
        lines.append(f"{lib} ({len(results[lib])})")
        # –ù—É–º–µ—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for number, item in enumerate(results[lib], 1):
            # –≤—ã—Ä–µ–∑–∞–µ–º –ª–∏—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            desc_parts = item.split('::')
            desc = f"{desc_parts[0]}"
            lines.append(f"{number}. {desc}")
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ row —Å—Ç—Ä–æ–∫
        for i in range(0, len(lines), rows):
            message_parts.append(lines[i:i+rows])
    strings_list = []
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–æ–∫ –∏–∑ –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
    for part in message_parts:
        strings_list.append('\n'.join(part))
    return strings_list

## –ë–û–¢

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
try:
    token = os.environ["PLEX_BOT_TOKEN"]
except KeyError:
    print('ERROR: –ó–∞–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (e—Öport PLEX_BOT_TOKEN=XXXXXXXXXXXXXXXXXXXXXXX)')
    sys.exit(1)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ white-–ª–∏—Å—Ç–∞
try:
    white_list = os.environ["PLEX_BOT_ALLOWED_USERS"].split(',')
    print(f'INFO: –ë–µ–ª—ã–π –ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∑–∞–¥–∞–Ω: {white_list}')
except KeyError:
    white_list = False
    print('INFO: –ë–µ–ª—ã–π –ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –∑–∞–¥–∞–Ω. –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')

def user_not_allowed(message):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–∞–π—Ç-–ª–∏—Å—Ç—É, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω"""
    if white_list:
        return bool(str(message.from_user.id) not in white_list)
    return False


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
asyncio.run(load_and_parse())


# –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token)
dp = Dispatcher()


async def main() -> None:
    """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ """
    print(f'INFO: SimPlexBot –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º {token}')    
    await dp.start_polling(bot)


@dp.message(user_not_allowed)
async def reply_to_not_allowed_user(message: Message) -> None:
    """ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≤–∞–π—Ç-–ª–∏—Å—Ç–µ """
    print(f"ERROR: –û—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}" \
          f" (ID:{message.from_user.id}) - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç")
    await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç')
    return


@dp.message(Command('start'))
async def send_welcome(message: Message) -> None:
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start """
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!" \
                         f" –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é")


@dp.message(Command('new'))
async def list_new(message: Message) -> None:
    """ –í—ã–≤–æ–¥ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /new"""
    await load_and_parse()
    results = get_list(FRESH_DAYS)
    message_parts = compose_message(results, 100)
    for part in message_parts:
        await message.answer(part)


@dp.message(Command('list'))
async def list_all(message: Message) -> None:
    """ –í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /list """
    await load_and_parse()
    results = get_list()
    message_parts = compose_message(results, 50)
    for part in message_parts:
        await message.answer(part)


@dp.message(Command('random'))
async def random_info(message: Message) -> None:
    await load_and_parse()
    """ –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É """
    thumbnail, caption = get_random_item()
    await message.answer_photo(photo = thumbnail, caption = caption)


@dp.message(F.text)
async def search_text(message: Message) -> None:
    """ –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ñ—Ä–∞–∑–µ """
    await load_and_parse()
    results, thumbnail, caption = search_by_string(message.text)
    if results:
        if results != 'single_item':
            message_parts = compose_message(results, 50)
            for part in message_parts:
                await message.answer(part)
        else:
            await message.answer_photo(photo = thumbnail, caption = caption)
    else:
        await message.answer(f" –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{message.text}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return


if __name__ == "__main__":
    asyncio.run(main())
